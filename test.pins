typ int : integer;

fun put_int(i:int):int=0;
fun put_str(s:string):int=0;
fun put_nl(i:int):int=0;
fun get_int(i:int):int=0;
fun get_str(i:int):string='';
fun exit(i:int):int=0;
fun time(i:int):int=0;

fun main(i : int) : int = (
    {n = 25},

    put_str('rec: '), put_nl(0),
    {t = time(0)},
    {for j = 0, n, 1 : (put_int(fib_recursive(j)), put_str(' '))},
    put_nl(0),

    put_str('time: '),
    put_int(time(0) - t),
    put_nl(0),

    put_str('bottom up: '),put_nl(0),
    {t = time(0)},
    {for j = 0, n, 1 : (put_int(fib_bottom_up(j)), put_str(' '))},
    put_nl(0),

    put_str('time: '),
    put_int(time(0) - t),
    put_nl(0),

    put_str('mem: '),put_nl(0),
    {t = time(0)},
    {for j = 0, n, 1 : (put_int(fib_memoization(j)), put_str(' '))},
    put_nl(0),

    put_str('time: '),
    put_int(time(0) - t),
    put_nl(0),

    0
)
{where var t : int; var j : int; var n : int};

fun fib_recursive(n : int) : int = (
    {if n < 2 then
        {r = 1}
    else
        {r = fib_recursive(n - 1) + fib_recursive(n - 2)}},
    r
)
{where var r : int};

fun fib_bottom_up(n : int) : int = (
    {a = 1}, {b = 1},
    {while {n = n - 1} >= 0 : (
        {c = b},
        {b = a + b},
        {a = c}
    )},
    a
)
{where var a : int; var b : int; var c : int};

var mem : arr[25]int;

fun fib_memoization(n : int) : int = (
    {if n < 2 then {r = 1} else (
        {if mem[n] == 0 then
            {mem[n] = fib_memoization(n - 1) + fib_memoization(n - 2)}
        },
        {r = mem[n]}
    )},
    r
)
{where var r : int}